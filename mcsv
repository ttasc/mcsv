#!/bin/sh
# shellcheck disable=SC2086

set -e
pwd=$PWD
fddir=/tmp/server@ttasc/mcsv # file descriptor location (std-in/out/err)
jarfile="mcsv.jar"

die() { printf "\033[31m\033[1m%s\033[m\n" "$1"; exit 1; }
if ! command -v java >/dev/null 2>&1; then die "Java is not installed!"; fi

while getopts 'rdam:' opt; do
    case "$opt" in
        r) rmworld=true ;;
        d) daemon=true ;;
        a) attach=true ;;
        m)
            malloc=${OPTARG}
        ;;
        *) echo "Invalid option!" ;;
    esac
done
shift $((OPTIND-1))

real_mem_size="$(sed 1q /proc/meminfo | tr -s ' ' | cut -d' ' -f2)"
real_mem_size=$((real_mem_size/1024))
if [ -z $malloc ]; then
    printf "You do not provide a RAM size to the server.\nSo the script will use an amount of RAM\nless than or equal to the system's maximum RAM.\n"
    echo "You can use \`-m <mem_size_in_MB>\` to specify amount of RAM to allocation for server."
    list_mem_size="131072 65536 32768 16384 12288 10240 8192 6144 4096 2048 1024"
    for mem_size in $list_mem_size; do
        if [ $real_mem_size -ge $mem_size ]; then
            malloc=$mem_size && break
        fi
    done
    if [ -z $malloc ]; then
        die "ERROR: unable to allocate RAM to server!"
    fi
    printf "\033[32m\033[1mUse %s of RAM for server\033[m\n" $malloc
fi
if [ $malloc -gt $real_mem_size ] || [ $malloc -lt 1024 ]; then
    die "Can't start server with allocated RAM: $malloc"
fi

opts="
-Xmx${malloc}M
-Xms${malloc}M
-XX:+AlwaysPreTouch
-XX:+DisableExplicitGC
-XX:+ParallelRefProcEnabled
-XX:+PerfDisableSharedMem
-XX:+UnlockExperimentalVMOptions
-XX:+UseG1GC
-XX:G1HeapRegionSize=8M
-XX:G1HeapWastePercent=5
-XX:G1MaxNewSizePercent=40
-XX:G1MixedGCCountTarget=4
-XX:G1MixedGCLiveThresholdPercent=90
-XX:G1NewSizePercent=30
-XX:G1RSetUpdatingPauseTimePercent=5
-XX:G1ReservePercent=20
-XX:InitiatingHeapOccupancyPercent=15
-XX:MaxGCPauseMillis=200
-XX:MaxTenuringThreshold=1
-XX:SurvivorRatio=32
-Dusing.aikars.flags=https://mcflags.emc.gs
-Daikars.new.flags=true
"
start_server="java $opts -jar $jarfile nogui"

if [ "$attach" = true ]; then
    if ! pid="$(pgrep -f "$jarfile nogui" 2>/dev/null)"; then
        die "mcsv is not running."
    fi
    tail -f --pid="$$" "$fddir"/out &
    while read -r input; do
        if ! kill -0 "$pid" >/dev/null 2>&1; then break; fi
        echo "$input" > "$fddir"/in
    done
else
    if pid="$(pgrep -f "$jarfile nogui" 2>/dev/null)"; then
        die "mcsv is already running in background (pid:$pid)"
    fi
    jardir="${1:-.}"
    if [ ! -f "$jardir/$jarfile" ]; then die "Please specify Server version (the name of the folder contain $jarfile file)"; fi
    cd "$jardir"
    if [ "$rmworld" = true ];then
        printf "Do you want to remove this old world? [y/N] "
        read -r ans
        case $ans in
            [Yy]* ) rm -rfv ops.json permissions.yml usercache.json world* ;;
            ""|* ) exit 1 ;;
        esac
    fi
    if [ "$daemon" = true ]; then
        mkdir -p "$fddir"
        if [ ! -p "$fddir"/in ]; then
            mkfifo "$fddir"/in
        fi
        (
            tail -f "$fddir"/in | \
            nohup $start_server > "$fddir"/out 2> "$fddir"/err && \
            printf "\n\t***@@@***\nServer is completely shutdown.\nPress any key to exit." >> "$fddir"/out ; \
            rm -rf "$fddir"
        ) &
    else
        $start_server
    fi
    cd "$pwd"
fi
